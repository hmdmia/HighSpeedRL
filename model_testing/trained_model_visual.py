import os

os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc, rcParams
from backend.utils.analysis import run_network_save



def save_lhs_array(env, model, sampling, dir="New Directory", type = 'alt'):
    """
    creates a Latin Hypercube set based on the number of samples specified
    to save run results to npy files by varying different ICs

    :param env: RL environment used for training
    :param model: RL model generated by training
    :param mean: means array for the L-H sample
    :param stdvs: standard deviaition array for the L-H sample
    :param sample: number of samples to create for the L-H
    :param dir: directory where files will be stored
    :param type: which ICs to vary
    :return:
    """

    for i in range(len(sampling)):
        if type == 'alt':
            nominal_start_1 = np.array([round(sampling[i,0]*1000,2), 0, 0, 3000,0, 0])
            run_network_save(nominal_start_1, env, model, 'alt', dir)

        elif type == 'vel':
            nominal_start_1 = np.array([30000, 0, 0, round(sampling[i,1]*1000,2), 0, 0])
            run_network_save(nominal_start_1, env, model, 'vel', dir)

        elif type == 'fpa':
            nominal_start_1 = np.array([30000, 0, 0, 3000, round(sampling[i,2] * 3.14159 / 180, 4), 0])
            run_network_save(nominal_start_1, env, model, 'fpa', dir)
        elif type == 'all':
            nominal_start_1 = np.array([round(sampling[i, 0]*1000,2), 0, 0, round(sampling[i,1]*1000,2), round(sampling[i,2]* 3.14159 / 180, 4), 0])
            run_network_save(nominal_start_1, env, model, 'all', dir)

def save_alt_array(env, model, factor,  dir="New Directory"):
    """
    saves npy files of runs at varying altitudes

    :param env: RL environment used for training
    :param model: RL model generated by training
    :param factor: percent by deviate the initial altitude from 30km
    :param dir: directory where files will be stored
    :return:
    """
    for i in np.linspace(30000*(1-factor), 30000*(1+factor), 11):
        nominal_start_1 = np.array([i, 0, 0, 3000, 0, 0])
        run_network_save(nominal_start_1, env, model, 'alt', dir)

def save_vel_array(env, model, factor, dir="New Directory"):
    """
        saves npy files of runs at varying velocities

        :param env: RL environment used for training
        :param model: RL model generated by training
        :param factor: percent by deviate the initial velocity from 3km
        :param dir: directory where files will be stored
        :return:
    """
    for i in np.linspace(3000*(1-factor), 3000*(1+factor), 11):
        nominal_start_2 = np.array([30000, 0, 0, round(i,2), 0, 0])
        run_network_save(nominal_start_2, env, model, 'vel', dir)

def save_fpa_array(env, model, factor, dir="New Directory"):
    """
        saves npy files of runs at varying fpa

        :param env: RL environment used for training
        :param model: RL model generated by training
        :param factor: percent by deviate the initial fpa from 0deg
        :param dir: directory where files will be stored
        :return:
    """
    for i in np.linspace(-20*factor, 20*factor, 11):
        nominal_start_3 = np.array([3e4, 0, 0, 3e3, round(i * 3.14159 / 180, 4), 0])
        run_network_save(nominal_start_3, env, model, 'fpa', dir)


def save_all_array(env, model, dir="New Directory"):
    """
        saves npy files of runs at varying fpa

        :param env: RL environment used for training
        :param model: RL model generated by training
        :param factor1: percent by deviate the initial altitude from 30km
        :param factor2: percent by deviate the initial velocity from 3km
        :param factor3: percent by deviate the initial fpa from 0deg
        :param dir: directory where files will be stored
        :return:
    """
    for i in np.linspace(20000, 30000, 21):
        for j in np.linspace(2500, 3500, 21):
            for k in np.linspace(-2.5, 2.5, 21):
                nominal_start_1 = np.array([i, 0, 0, j, round(k * 3.14159 / 180, 4), 0])
                run_network_save(nominal_start_1, env, model, 'all', dir)


def plot_mean(filename, type='traj', dire = None, attr = None,  labels = None):
    """
    Overlay trajecory, control or fpa plots from saved npy files

    :param filename: txt filename that contains the list of npy files to use
    :param type: type of plot to produce
    :param dire: directory where npy files are located
    :param attr: which ICs to use in labeling
    :param labels: create custom label for plots
    :return:
    """
    rc('xtick', labelsize=10)
    rc('ytick', labelsize=10)
    rcParams['font.weight'] = 'bold'

    mean_file = open(filename, 'r')
    ctr = 0
    fig = plt.figure()
    target_alt = 3

    if type == 'traj':
        for i in mean_file:

            x = i.strip()
            alt = np.load(dire+x + '_state.npy')

            alt_1 = alt[1, :] * 180 / np.pi
            alt_2 = alt[0, :] / 1000

            if attr == 'alt':
                plt.plot(alt_1, alt_2, '--', label= str(int(alt[0, 0]/1000)) + 'km')
            elif attr == 'vel':
                plt.plot(alt_1, alt_2, '--', label= str(int(alt[3, 0])) + ' m/s')
            elif attr == 'fpa':
                plt.plot(alt_1, alt_2, '--', label= str(round((alt[4, 0])/(3.14159/180),1)) + 'deg')
            else:
                plt.plot(alt_1, alt_2, '--', label=str(labels[ctr]))
            if ctr >= 20:
                break
            ctr += 1
            plt.xlabel('Downrange, ' r"$\theta$"+' [deg]',fontsize=12, fontweight = 'bold')
            plt.ylabel('Altitude, '+ '$\it{h}$'+ ' [km]', fontsize=12, fontweight = 'bold')
            plt.title('Trajectory', fontsize=12, fontweight = 'bold')

        plt.axhline(target_alt,color ='k', linestyle = '--')

    elif type == 'velocity':
        ctr = 0
        for i in mean_file:
            x = i.strip()

            alt = np.load(dire + x + '_state.npy')
            time = np.load(dire + x + '_time.npy')

            plt.plot(time, alt[3,:], '--', label=str(labels[ctr]))
            ctr += 1

    elif type == 'control':
        ctr = 0
        for i in mean_file:

            x = i.strip()
            alt = np.load(dire+x+ '_state.npy')
            time = np.load(dire+x + '_time.npy')
            cont = np.load(dire+x + '_control.npy')

            cont_1 = cont[0, :] * 180 / np.pi

            if attr == 'alt':
                plt.plot(time, cont_1, '--', label= str(alt[0, 0]/1000) + 'km')
            elif attr == 'vel':
                plt.plot(time, cont_1, '--', label= str(int(alt[3, 0])) + ' m/s')
            elif attr == 'fpa':
                plt.plot(time, cont_1, '--', label= str(round((alt[4, 0])/(3.14159/180),1)) + 'deg')

            else:
                plt.plot(time, cont_1, '--', label=str(labels[ctr]))

            plt.xlabel('Time, '+ '$\it{t}$'+' [s]', fontsize=12, fontweight = 'bold')
            plt.ylabel('Angle of Attack, '+ r'$\alpha$'+ ' [deg]', fontsize=12, fontweight = 'bold')
            plt.title('Control History', fontsize=12, fontweight = 'bold')
            ctr += 1

    elif type == 'fpa':
        ctr = 0
        for i in mean_file:

            x = i.strip()
            alt = np.load(dire+x + '_state.npy')
            time = np.load(dire+x + '_time.npy')

            alt_1 = alt[4, :] * 180 / np.pi

            if attr == 'alt':
                plt.plot(time, alt_1, '--', label= str(alt[0, 0]/1000) + 'km')
            elif attr == 'vel':
                plt.plot(time, alt_1, '--', label= str(int(alt[3, 0])) + ' m/s')
            elif attr == 'fpa':
                plt.plot(time, alt_1, '--', label= str(round((alt[4, 0])/(3.14159/180),1)) + 'deg')

            else:
                plt.plot(time, alt_1, '--', label=str(labels[ctr]))
            plt.xlabel('Time, '+ '$\it{t}$'+' [s]', fontsize=12, fontweight = 'bold')
            plt.ylabel('Flight Path Angle, '+r'$\gamma$'+' [deg]', fontsize=12, fontweight = 'bold')
            plt.title('Flight Path Angle', fontsize=12, fontweight = 'bold')
            ctr += 1

        plt.axhline(y=0.25 * np.pi / 180, linestyle='--')

    plt.legend(fontsize= 12)
    mean_file.close()
    plt.show()
